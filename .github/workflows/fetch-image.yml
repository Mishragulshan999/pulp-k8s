name: Fetch and Compare Images

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger from GitHub UI

jobs:
  fetch_images:
    runs-on: [self-hosted, Linux, X64]  # Target your custom self-hosted runner with the custom label 'pulp-k8s'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run fetch-images script
        run: |
          # Define GitHub repository and token
          GITHUB_REPO="mishragulshan999"
          TOKEN="${{ secrets.GH_ACCESS_TOKEN }}"  # Access your custom secret 'GH_ACCESS_TOKEN'

          # Fetch container images from GitHub
          echo "Fetching images from GitHub..."
          IMAGES=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/users/$GITHUB_REPO/packages?package_type=container")

          # Extract image names and URLs
          IMAGE_NAMES=$(echo "$IMAGES" | grep -oP '"name":\s*"\K[^"]+')
          IMAGE_URLS=$(echo "$IMAGES" | grep -oP '"html_url":\s*"\K[^"]+')

          # Fetch deployed tags in Kubernetes
          echo "Fetching deployed tags from Kubernetes..."
          DEPLOYED_IMAGES=$(kubectl get pods --all-namespaces -o=jsonpath='{.items[*].spec.containers[*].image}' \
            | tr ' ' '\n')

          # Prepare JSON data for visualization
          OUTPUT="["
          paste <(echo "$IMAGE_NAMES") <(echo "$IMAGE_URLS") | while IFS=$'\t' read -r IMAGE_NAME IMAGE_URL; do
              GITHUB_TAGS=$(curl -s -L \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/users/$GITHUB_REPO/packages/container/$IMAGE_NAME/versions" \
                | grep -oP '"tags":\s*\[\K[^\]]+' | tr ',' '\n' | tr -d '"')

              # Check if tags are available
              if [[ -z "$GITHUB_TAGS" ]]; then
                  echo "No tags found for image $IMAGE_NAME"
                  continue
              fi

              for tag in $GITHUB_TAGS; do
                  if echo "$DEPLOYED_IMAGES" | grep -q "$IMAGE_NAME:$tag"; then
                      STATUS="Deployed"
                  else
                      STATUS="NOT Deployed"
                  fi
                  OUTPUT="$OUTPUT{\"Image\":\"$IMAGE_NAME\",\"Tag\":\"$tag\",\"Status\":\"$STATUS\"},"
              done
          done

          OUTPUT="${OUTPUT%,}]"
          echo "$OUTPUT" > output.json
          echo "JSON output written to output.json"

      - name: Upload JSON output as artifact
        uses: actions/upload-artifact@v3
        with:
          name: output-json
          path: output.json
