name: Cleanup Old Images

on:
  workflow_dispatch:

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up jq (for JSON processing)
        run: sudo apt-get install -y jq

      - name: Fetch Deployed Images from Kubernetes
        run: |
          DEPLOYED_IMAGES=$(kubectl get pods -A -o json | jq -r '.items[].spec.containers[].image' | sort -u)
          echo "$DEPLOYED_IMAGES" > deployed_images.txt
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Fetch Image List from GitHub Packages
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPO: "mishragulshan999"
        run: |
          OUTPUT="["

          # Read Deployed Images from File
          DEPLOYED_IMAGES=$(cat deployed_images.txt)

          # Get the list of all container images in GitHub Packages
          IMAGES=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/users/$GITHUB_REPO/packages?package_type=container" \
            | jq -r '.[] | {image: .name}')

          for row in $(echo "$IMAGES" | jq -c '.'); do
              IMAGE_NAME=$(echo "$row" | jq -r '.image')

              # Fetch GitHub tags for each image
              GITHUB_TAGS=$(curl -s -L \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/users/$GITHUB_REPO/packages/container/$IMAGE_NAME/versions" \
                | jq -r '.[].metadata.container.tags' | jq -r '.[]' | sort -V)

              TAGS_ARRAY=($GITHUB_TAGS)
              TAG_COUNT=${#TAGS_ARRAY[@]}

              for ((i=0; i<TAG_COUNT; i++)); do
                  TAG="${TAGS_ARRAY[$i]}"
                  IMAGE_TAG="$IMAGE_NAME:$TAG"

                  if echo "$DEPLOYED_IMAGES" | grep -q "$IMAGE_TAG"; then
                      STATUS="Deployed"
                      DELETE="No"
                      REASON="Deployed on K8s"
                  elif (( i >= TAG_COUNT - 5 )); then
                      STATUS="NOT Deployed"
                      DELETE="No"
                      REASON="Reserved (Last 5)"
                  else
                      STATUS="NOT Deployed"
                      DELETE="Yes"
                      REASON="Old Image, Safe to Delete"

                      # Delete Image
                      DELETE_RESPONSE=$(curl -X DELETE -s -L \
                          -H "Accept: application/vnd.github+json" \
                          -H "Authorization: Bearer $TOKEN" \
                          -H "X-GitHub-Api-Version: 2022-11-28" \
                          "https://api.github.com/users/$GITHUB_REPO/packages/container/$IMAGE_NAME/versions/$TAG")

                      if [[ $? -eq 0 ]]; then
                          REASON="Deleted Successfully"
                      else
                          REASON="Failed to Delete"
                      fi
                  fi

                  # Add to JSON Output
                  OUTPUT="$OUTPUT{\"Image\":\"$IMAGE_NAME\",\"Tag\":\"$TAG\",\"Status\":\"$STATUS\",\"Delete\":\"$DELETE\",\"Reason\":\"$REASON\"},"
              done
          done

          OUTPUT="${OUTPUT%,}]"
          echo "$OUTPUT" > output.json
          echo "JSON output written to output.json"

      - name: Upload JSON to Artifact
        uses: actions/upload-artifact@v3
        with:
          name: output-json
          path: output.json
