name: Fetch and Compare Images

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger from GitHub UI

jobs:
  fetch_images:
    runs-on: [self-hosted, Linux, X64]  # Target your custom self-hosted runner with the custom label 'pulp-k8s'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Define Variables
        run: |
          # Define GitHub repository and token
          GITHUB_REPO="mishragulshan999"
          TOKEN="${{ secrets.GH_ACCESS_TOKEN }}"  # Access your custom secret 'GH_ACCESS_TOKEN'

      - name: Run fetch-images script
        run: |
          # Fetch container images from GitHub
          echo "Fetching images from GitHub..."
          IMAGES=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/users/$GITHUB_REPO/packages?package_type=container" \
            | jq -r '.[] | {image: .name, url: .html_url}')

          # Fetch deployed tags in Kubernetes
          echo "Fetching deployed tags from Kubernetes..."
          DEPLOYED_IMAGES=$(kubectl get pods --all-namespaces -o=jsonpath='{.items[*].spec.containers[*].image}' \
            | tr ' ' '\n')

          # Initialize output variable
          OUTPUT="["
          
          # Iterate over each image from GitHub
          for row in $(echo "$IMAGES" | jq -c '.'); do
              IMAGE_NAME=$(echo "$row" | jq -r '.image')
              GITHUB_TAGS=$(curl -s -L \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/users/$GITHUB_REPO/packages/container/$IMAGE_NAME/versions" \
                | jq -r '.[0].metadata.container.tags[]')
              
              # Create array to hold all tags and statuses
              TAGS=()
              for tag in $GITHUB_TAGS; do
                  if echo "$DEPLOYED_IMAGES" | grep -q "$IMAGE_NAME:$tag"; then
                      STATUS="Deployed"
                  else
                      STATUS="NOT Deployed"
                  fi
                  TAGS+=("$tag:$STATUS")
              done

              # Get the tags in sorted order (latest tags first)
              SORTED_TAGS=$(echo "${TAGS[@]}" | tr ' ' '\n' | sort -r | head -n 5)

              # Mark the tags to be kept (latest 5 or deployed images)
              for tag in $SORTED_TAGS; do
                  TAG_NAME=$(echo $tag | cut -d: -f1)
                  STATUS=$(echo $tag | cut -d: -f2)

                  if [ "$STATUS" == "Deployed" ] || [ $(echo "$TAGS" | grep -c "$TAG_NAME") -le 5 ]; then
                      OUTPUT="$OUTPUT{\"Image\":\"$IMAGE_NAME\",\"Tag\":\"$TAG_NAME\",\"Status\":\"$STATUS\"},"
                  fi
              done
          done

          OUTPUT="${OUTPUT%,}]"
          echo "$OUTPUT" > output.json
          echo "JSON output written to output.json"

      - name: Upload JSON output as artifact
        uses: actions/upload-artifact@v3
        with:
          name: output-json
          path: output.json
