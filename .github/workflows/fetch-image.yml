name: Fetch and Compare Images with Delete Logic

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Manual trigger option

jobs:
  fetch_and_compare_images:
    runs-on: [self-hosted, Linux, X64]  # Custom self-hosted runner
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Fetch GitHub Images
      - name: Fetch GitHub Images
        run: |
          GITHUB_REPO="mishragulshan999"
          TOKEN="${{ secrets.GH_ACCESS_TOKEN }}"

          # Fetch container images from GitHub
          echo "Fetching images from GitHub..."
          IMAGES=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/users/$GITHUB_REPO/packages?package_type=container")

          echo "$IMAGES" > github_images.json
          echo "GitHub images fetched successfully"

      # Step 3: Fetch Kubernetes Images
      - name: Fetch Kubernetes Images
        run: |
          echo "Fetching deployed images from Kubernetes..."
          DEPLOYED_IMAGES=$(kubectl get pods --all-namespaces -o=jsonpath='{.items[*].spec.containers[*].image}' | tr ' ' '\n')
          echo "$DEPLOYED_IMAGES" > k8s_images.txt
          echo "Kubernetes images fetched successfully"

      # Step 4: Compare GitHub and Kubernetes Images
      - name: Compare GitHub and Kubernetes Images
        run: |
          echo "Comparing GitHub and Kubernetes images..."
          GITHUB_IMAGES=$(cat github_images.json)
          DEPLOYED_IMAGES=$(cat k8s_images.txt)

          OUTPUT="["

          # Loop through GitHub images
          for row in $(echo "$GITHUB_IMAGES" | jq -c '.[]'); do
              IMAGE_NAME=$(echo "$row" | jq -r '.name')
              
              # Fetch tags associated with each image
              GITHUB_TAGS=$(curl -s -L \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/users/$GITHUB_REPO/packages/container/$IMAGE_NAME/versions")

              # Debug the structure of the response to ensure correct data
              echo "GitHub API response for $IMAGE_NAME:"
              echo "$GITHUB_TAGS" | jq .

              # Check if metadata and tags exist in the response
              if echo "$GITHUB_TAGS" | jq -e 'has("metadata") and .metadata.container.tags' > /dev/null; then
                  GITHUB_TAGS=$(echo "$GITHUB_TAGS" | jq -r '.metadata.container.tags[]')
              else
                  echo "No tags found for image $IMAGE_NAME, skipping..."
                  continue
              fi

              # Process each tag and compare with Kubernetes deployed images
              for tag in $GITHUB_TAGS; do
                  echo "Processing image $IMAGE_NAME with tag $tag"
                  if echo "$DEPLOYED_IMAGES" | grep -q "$IMAGE_NAME:$tag"; then
                      STATUS="Deployed"
                  else
                      STATUS="NOT Deployed"
                  fi
                  OUTPUT="$OUTPUT{\"Image\":\"$IMAGE_NAME\",\"Tag\":\"$tag\",\"Status\":\"$STATUS\"},"
              done
          done

          OUTPUT="${OUTPUT%,}]"
          echo "$OUTPUT" > output.json
          echo "Comparison complete, output written to output.json"
          cat output.json  # Display output to debug

      # Step 5: Delete Unused Images
      - name: Delete Unused Images
        run: |
          echo "Deleting unused images..."
          FINAL_IMAGES=$(cat output.json)

          # Check if output.json has data
          if [ -z "$FINAL_IMAGES" ]; then
            echo "No images to process for deletion."
            exit 0
          fi

          DELETE_IMAGES=()
          for row in $(echo "$FINAL_IMAGES" | jq -c '.[]'); do
              IMAGE_NAME=$(echo "$row" | jq -r '.Image')
              STATUS=$(echo "$row" | jq -r '.Status')

              # Logic to exclude last 5 images from deletion
              if [[ "$STATUS" == "NOT Deployed" ]]; then
                  DELETE_IMAGES+=("$IMAGE_NAME")
              fi
          done

          # Log images that will be deleted
          echo "Images to be deleted: ${DELETE_IMAGES[@]}"

          # Image deletion logic (Delete images in GitHub)
          for img in "${DELETE_IMAGES[@]}"; do
              echo "Deleting image: $img"
              curl -X DELETE -H "Authorization: Bearer $TOKEN" \
                "https://api.github.com/users/$GITHUB_REPO/packages/container/$img"
          done
          echo "Image deletion process completed."

      # Step 6: Upload JSON output as artifact
      - name: Upload JSON output as artifact
        uses: actions/upload-artifact@v3
        with:
          name: output-json
          path: output.json
