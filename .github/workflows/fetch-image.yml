name: Fetch and Compare Images

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger from GitHub UI

jobs:
  fetch_images:
    runs-on: [self-hosted, Linux, X64]  # Target your custom self-hosted runner with the custom label 'pulp-k8s'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run fetch-images script
        run: |
          # Define GitHub repository and token
          GITHUB_REPO="mishragulshan999"
          TOKEN="${{ secrets.GH_ACCESS_TOKEN }}"  # Access your custom secret 'GH_ACCESS_TOKEN'

          # Fetch container images from GitHub
          echo "Fetching images from GitHub..."
          IMAGES=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/users/$GITHUB_REPO/packages?package_type=container")

          # Debug: Print the raw response to check structure
          echo "GitHub API Response for Images:"
          echo "$IMAGES" | jq .

          # Fetch deployed tags in Kubernetes
          echo "Fetching deployed tags from Kubernetes..."
          DEPLOYED_IMAGES=$(kubectl get pods --all-namespaces -o=jsonpath='{.items[*].spec.containers[*].image}' \
            | tr ' ' '\n')

          # Prepare JSON data for visualization
          OUTPUT="["
          IMAGE_TAGS=()  # Initialize an array to hold image tags

          for row in $(echo "$IMAGES" | jq -c '.[]'); do
              IMAGE_NAME=$(echo "$row" | jq -r '.name')

              # Fetch tags for each image
              GITHUB_TAGS=$(curl -s -L \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/users/$GITHUB_REPO/packages/container/$IMAGE_NAME/versions" \
                | jq -r '.[].metadata.container.tags[]')

              # Debug: Show the tags being fetched
              echo "Tags for $IMAGE_NAME: $GITHUB_TAGS"

              for tag in $GITHUB_TAGS; do
                  if echo "$DEPLOYED_IMAGES" | grep -q "$IMAGE_NAME:$tag"; then
                      STATUS="Deployed"
                  else
                      STATUS="NOT Deployed"
                  fi
                  IMAGE_TAGS+=("$IMAGE_NAME:$tag|$STATUS")  # Append image and status to array
              done
          done

          # Sort and filter the tags
          SORTED_IMAGES=$(for tag in "${IMAGE_TAGS[@]}"; do echo "$tag"; done | sort -t':' -k2,2n)

          # Select last 5 images to keep and delete others, excluding deployed ones
          FINAL_IMAGES=()
          for tag in $SORTED_IMAGES; do
              IMAGE=$(echo $tag | cut -d'|' -f1)
              STATUS=$(echo $tag | cut -d'|' -f2)

              # Condition: Keep last 5 images
              if [[ ${#FINAL_IMAGES[@]} -lt 5 ]] || [[ "$STATUS" == "Deployed" ]]; then
                  FINAL_IMAGES+=("$IMAGE")
              fi
          done

          # Prepare delete list: Images that are NOT in FINAL_IMAGES and are NOT deployed
          DELETE_IMAGES=()
          for tag in "${IMAGE_TAGS[@]}"; do
              IMAGE=$(echo $tag | cut -d'|' -f1)
              if [[ ! " ${FINAL_IMAGES[@]} " =~ " $IMAGE " ]] && [[ "$STATUS" == "NOT Deployed" ]]; then
                  DELETE_IMAGES+=("$IMAGE")
              fi
          done

          # Debug: Print the images to be deleted
          echo "Images to be deleted:"
          for img in "${DELETE_IMAGES[@]}"; do
              echo $img
          done

          # Run deletion command for images to be deleted
          for img in "${DELETE_IMAGES[@]}"; do
              echo "Deleting image: $img"
              curl -X DELETE -H "Authorization: Bearer $TOKEN" \
                "https://api.github.com/users/$GITHUB_REPO/packages/container/$img"
          done

          OUTPUT="${OUTPUT%,}]"
          echo "$OUTPUT" > output.json
          echo "JSON output written to output.json"

      - name: Upload JSON output as artifact
        uses: actions/upload-artifact@v3
        with:
          name: output-json
          path: output.json
