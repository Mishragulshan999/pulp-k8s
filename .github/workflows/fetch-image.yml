name: Fetch and Compare Images

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger from GitHub UI

jobs:
  fetch_images:
    runs-on: [self-hosted, Linux, X64]  # Target your custom self-hosted runner with the custom label 'pulp-k8s'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Fetch GitHub Images
        id: fetch_images
        run: |
          # Define GitHub repository and token
          GITHUB_REPO="mishragulshan999"
          TOKEN="${{ secrets.GH_ACCESS_TOKEN }}"  # Access your custom secret 'GH_ACCESS_TOKEN'

          # Fetch the list of all container images from GitHub
          IMAGES=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/users/$GITHUB_REPO/packages?package_type=container" \
            | jq -r '.[].name')

          echo "Fetched Images: $IMAGES"
          echo "::set-output name=images::$IMAGES"

      - name: Fetch Kubernetes Deployed Tags
        id: fetch_k8s_tags
        run: |
          # Fetch Kubernetes deployed tags (with full image name)
          K8S_TAGS=$(kubectl get pods --all-namespaces -o=jsonpath='{.items[*].spec.containers[*].image}' | tr ' ' '\n' | grep -E "^ghcr.io/$GITHUB_REPO/")
          echo "Fetched Kubernetes tags: $K8S_TAGS"
          echo "::set-output name=k8s_tags::$K8S_TAGS"

      - name: Process Image Comparison
        id: process_comparison
        run: |
          # Get the fetched images and Kubernetes tags from previous steps
          IMAGES="${{ steps.fetch_images.outputs.images }}"
          K8S_TAGS="${{ steps.fetch_k8s_tags.outputs.k8s_tags }}"
          
          echo "Processing Image Comparison..."

          # Function to draw a box
          draw_box() {
            local width=$1
            printf "%0.s-" $(seq 1 $width)
            echo ""
          }

          # Loop through images for comparison
          for IMAGE_NAME in $IMAGES; do
            echo "Processing image: $IMAGE_NAME"

            # Fetch versions from GitHub
            IMAGE_VERSIONS=$(curl -s -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/users/$GITHUB_REPO/packages/container/$IMAGE_NAME/versions" \
              | jq -r '.[] | "\(.id) \(.metadata.container.tags[0]) \(.created_at)"' | sort -k3)

            # Debugging: Show what tags are fetched from Kubernetes
            echo "Fetched GitHub versions: $IMAGE_VERSIONS"

            # Print comparison table
            BOX_WIDTH=80
            draw_box $BOX_WIDTH
            printf "| %-75s |\n" "Image: $IMAGE_NAME"
            draw_box $BOX_WIDTH
            printf "| %-22s | %-22s | %-22s |\n" "GitHub Tag" "K8s Deployed?" "Push Date"
            draw_box $BOX_WIDTH

            while read -r version_id tag created_at; do
              if echo "$K8S_TAGS" | grep -qE "^ghcr.io/$GITHUB_REPO/$IMAGE_NAME:$tag$"; then
                printf "| %-22s | %-22s | %-22s |\n" "$tag" "Yes" "$created_at"
              else
                printf "| %-22s | %-22s | %-22s |\n" "$tag" "No" "$created_at"
              fi
            done <<< "$IMAGE_VERSIONS"

            draw_box $BOX_WIDTH
            echo ""

          done

      - name: Delete Old Image Versions
        id: delete_images
        run: |
          # Get the fetched images and Kubernetes tags from previous steps
          IMAGES="${{ steps.fetch_images.outputs.images }}"
          K8S_TAGS="${{ steps.fetch_k8s_tags.outputs.k8s_tags }}"
          
          echo "Processing Image Deletion..."

          # Extract IDs and tags and delete old versions
          for IMAGE_NAME in $IMAGES; do
            IMAGE_VERSIONS=$(curl -s -L \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/users/$GITHUB_REPO/packages/container/$IMAGE_NAME/versions" \
              | jq -r '.[] | "\(.id) \(.metadata.container.tags[0]) \(.created_at)"' | sort -k3)

            # Extract IDs and tags
            TOTAL_VERSIONS=$(echo "$IMAGE_VERSIONS" | wc -l)
            DELETE_COUNT=$((TOTAL_VERSIONS - 5))

            if [[ $DELETE_COUNT -gt 0 ]]; then
              echo "Deleting $DELETE_COUNT old versions for $IMAGE_NAME..."

              # Delete old versions if they are not deployed in Kubernetes
              echo "$IMAGE_VERSIONS" | head -n $DELETE_COUNT | while read -r version_id tag created_at; do
                if ! echo "$K8S_TAGS" | grep -qE "^ghcr.io/$GITHUB_REPO/$IMAGE_NAME:$tag$"; then
                  # Delete image version
                  curl -L -X DELETE \
                    -H "Accept: application/vnd.github+json" \
                    -H "Authorization: Bearer $TOKEN" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    "https://api.github.com/users/$GITHUB_REPO/packages/container/$IMAGE_NAME/versions/$version_id"
                  echo "Deleted version ID: $version_id"
                else
                  echo "Skipping deletion of deployed image: $tag"
                fi
              done
            else
              echo "No old images to delete for $IMAGE_NAME."
            fi
          done
