name: Cleanup Old Container Images

on:
  schedule:
    - cron: '0 3 * * *'  # Runs daily at 3 AM UTC
  workflow_dispatch:  # Manual trigger

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get List of Images in GitHub Packages
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPO: "pavanbandaru/pulp-k8s"
        run: |
          IMAGES=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/users/$GITHUB_REPO/packages?package_type=container" \
            | jq -r '.[].name')
          
          echo "IMAGES=$IMAGES" >> $GITHUB_ENV

      - name: Get Deployed Images from Kubernetes
        run: |
          DEPLOYED_IMAGES=$(kubectl get pods -A -o json | jq -r '.items[].spec.containers[].image' | sort -u)
          echo "DEPLOYED_IMAGES=$DEPLOYED_IMAGES" >> $GITHUB_ENV

      - name: Cleanup Old Image Versions with Detailed Logging
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPO: "pavanbandaru/pulp-k8s"
        run: |
          OUTPUT="["
          for IMAGE_NAME in $IMAGES; do
              echo "Processing image: $IMAGE_NAME"
              
              # Get all tags sorted by version
              GITHUB_TAGS=$(curl -s -L \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/users/$GITHUB_REPO/packages/container/$IMAGE_NAME/versions" \
                | jq -r '.[].metadata.container.tags[]' | sort -V)

              # Store last 5 versions
              LAST_5_VERSIONS=$(echo "$GITHUB_TAGS" | tail -n 5)

              # Iterate over all versions
              for tag in $GITHUB_TAGS; do
                  if echo "$DEPLOYED_IMAGES" | grep -q "$IMAGE_NAME:$tag"; then
                      STATUS="Deployed"
                      DELETE="No"
                      REASON="Deployed on Kubernetes"
                  else
                      STATUS="NOT Deployed"
                      DELETE="Yes"
                      REASON=""

                      # Check if it should be preserved
                      if echo "$LAST_5_VERSIONS" | grep -q "$tag"; then
                          DELETE="No"
                          REASON="Reserved (Last 5 Versions)"
                      fi
                  fi

                  OUTPUT="$OUTPUT{\"Image\":\"$IMAGE_NAME\",\"Tag\":\"$tag\",\"Status\":\"$STATUS\",\"Delete\":\"$DELETE\",\"Reason\":\"$REASON\"},"
              done

              # Identify versions to delete
              for tag in $GITHUB_TAGS; do
                  if echo "$LAST_5_VERSIONS" | grep -q "$tag"; then
                      echo "Skipping preserved tag: $IMAGE_NAME:$tag"
                      continue
                  elif echo "$DEPLOYED_IMAGES" | grep -q "$IMAGE_NAME:$tag"; then
                      echo "Skipping deployed tag: $IMAGE_NAME:$tag"
                      continue
                  else
                      echo "Deleting old tag: $IMAGE_NAME:$tag"
                      VERSION_ID=$(curl -s -L \
                          -H "Accept: application/vnd.github+json" \
                          -H "Authorization: Bearer $TOKEN" \
                          -H "X-GitHub-Api-Version: 2022-11-28" \
                          "https://api.github.com/users/$GITHUB_REPO/packages/container/$IMAGE_NAME/versions" \
                          | jq -r ".[] | select(.metadata.container.tags[] == \"$tag\") | .id")

                      if [ -n "$VERSION_ID" ]; then
                          curl -X DELETE -L \
                              -H "Accept: application/vnd.github+json" \
                              -H "Authorization: Bearer $TOKEN" \
                              -H "X-GitHub-Api-Version: 2022-11-28" \
                              "https://api.github.com/users/$GITHUB_REPO/packages/container/$IMAGE_NAME/versions/$VERSION_ID"
                          echo "Deleted $IMAGE_NAME:$tag"
                      fi
                  fi
              done
          done

          OUTPUT="${OUTPUT%,}]"
          echo "$OUTPUT" > output.json
          echo "JSON output written to output.json"

      - name: Upload JSON Output as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-status
          path: output.json
